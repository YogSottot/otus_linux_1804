---
# tasks file for wdijkerman.zabbix

- name: "Fix facts for linuxmint - distribution release"
  set_fact:
    ansible_distribution_release: xenial
  when:
    - ansible_os_family == "Linuxmint"
    - ansible_distribution_release == "sonya" or ansible_distribution_release == "serena"

- name: "Fix facts for linuxmint - family"
  set_fact:
    ansible_os_family: Debian
  when: ansible_os_family == "Linuxmint"

- name: "Include OS-specific variables"
  include_vars: "{{ ansible_os_family }}.yml"
  tags:
    - zabbix-agent

- name: "Install the correct repository"
  include: "RedHat.yml"
  when:
    - ansible_os_family == "RedHat"
  tags:
    - zabbix-agent
    - init
    - config
    - service

- name: "Install the correct repository"
  include: "Debian.yml"
  when:
    - ansible_os_family == "Debian"
  tags:
    - zabbix-agent
    - init
    - config
    - service

- name: "Install the correct repository"
  include: "Suse.yml"
  when:
    - ansible_os_family == "Suse"
  tags:
    - zabbix-agent
    - init
    - config
    - service

- name: "Set default ip address for zabbix_agent_ip"
  set_fact:
    zabbix_agent_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4'].address }}"
  when:
    - zabbix_agent_ip is not defined
    - "'ansible_default_ipv4' in hostvars[inventory_hostname]"

- name: "Fail invalid specified agent_listeninterface"
  fail:
    msg: "The specified network interface does not exist"
  when:
    - zabbix_agent_listeninterface
    - (zabbix_agent_listeninterface not in ansible_all_ipv4_addresses)
  tags:
    - zabbix-agent
    - config

- name: "Get IP of agent_listeninterface when no agent_listenip specified"
  set_fact:
    zabbix_agent_listenip: "{{ hostvars[inventory_hostname]['ansible_' + zabbix_agent_listeninterface]['ipv4'].address | default('0.0.0.0') }}"
    zabbix_agent_ip: "{{ hostvars[inventory_hostname]['ansible_' + zabbix_agent_listeninterface]['ipv4'].address | default('0.0.0.0') }}"
  when:
    - zabbix_agent_listeninterface
    - not zabbix_agent_listenip
  tags:
    - zabbix-agent
    - config
    - api

- name: "Default agent_listenip to all when not specified"
  set_fact:
    zabbix_agent_listenip: '0.0.0.0'
  when:
    - not zabbix_agent_listenip
  tags:
    - zabbix-agent
    - config

- name: "Fail invalid specified agent_listenip"
  fail:
    msg: "The agent_listenip does not exist"
  when:
    - zabbix_agent_listenip != '0.0.0.0'
    - zabbix_agent_listenip != '127.0.0.1'
    - (zabbix_agent_listenip not in ansible_all_ipv4_addresses)
  tags:
    - zabbix-agent
    - config

# straight to getenforce binary , workaround for missing python_selinux library
- name: "Get getenforce binary"
  stat:
    path: /usr/sbin/getenforce
  register: getenforce_bin
  become: yes

- name: "Collect getenforce output"
  command: getenforce
  register: sestatus
  when: 'getenforce_bin.stat.exists'
  changed_when: false
  become: yes

- name: "Set zabbix_selinux to true if getenforce returns Enforcing or Permissive"
  set_fact:
    zabbix_selinux: "{{ true }}"
  when: 'getenforce_bin.stat.exists and ("Enforcing" in sestatus.stdout or "Permissive" in sestatus.stdout)'

- name: "Allow zabbix_agent to start (SELinux)"
  selinux_permissive:
    name: zabbix_agent_t
    permissive: true
  become: yes
  when:
    - zabbix_selinux

- name: "Configure zabbix-agent"
  template:
    src: zabbix_agentd.conf.j2
    dest: /etc/zabbix/{{ zabbix_agent_conf }}
    owner: root
    group: root
    mode: 0644
  notify:
    - restart zabbix-agent
  become: yes
  tags:
    - zabbix-agent
    - config
    - init

- name: "Create directory for PSK file if not exist."
  file:
    path: "{{ zabbix_agent_tlspskfile | dirname }}"
    mode: 0755
    state: directory
  become: yes
  when:
    - zabbix_agent_tlspskfile is defined
    - zabbix_agent_tlspskfile != ''

- name: "Place TLS PSK File"
  copy:
    dest: "{{ zabbix_agent_tlspskfile }}"
    content: "{{ zabbix_agent_tlspsk_secret }}"
    owner: zabbix
    group: zabbix
    mode: 0400
  become: yes
  when:
    - zabbix_agent_tlspskfile is defined
    - zabbix_agent_tlspsk_secret is defined
    - zabbix_agent_tlspskfile != ''
    - zabbix_agent_tlspsk_secret != ''

- name: "Create include dir zabbix-agent"
  file:
    path: "{{ zabbix_agent_include }}"
    owner: root
    group: root
    state: directory
  become: yes
  tags:
    - config
    - include

- name: "Configure IPTables"
  iptables:
    destination_port: "{{ zabbix_agent_listenport }}"
    source: "{{ zabbix_agent_firewall_source | default(omit) }}"
    protocol: tcp
    chain: INPUT
    jump: ACCEPT
  become: yes
  when: zabbix_agent_firewall_enable

- name: "Make sure the zabbix-agent service is running"
  service:
    name: "{{ zabbix_agent_service }}"
    state: started
    enabled: yes
  become: yes
  tags:
    - init
    - service

- name: "Create hostgroups"
  local_action:
    module: zabbix_group
    server_url: "{{ zabbix_url }}"
    login_user: "{{ zabbix_api_user }}"
    login_password: "{{ zabbix_api_pass }}"
    host_group: "{{ zabbix_host_groups }}"
    state: "{{ zabbix_create_hostgroup }}"
  when:
    - zabbix_api_create_hostgroup
  become: no
  tags:
    - api

- name: "Create a new host or update an existing host's info"
  local_action:
    module: zabbix_host
    server_url: "{{ zabbix_url }}"
    login_user: "{{ zabbix_api_user }}"
    login_password: "{{ zabbix_api_pass }}"
    host_name: "{{ zabbix_agent_hostname }}"
    host_groups: "{{ zabbix_host_groups }}"
    link_templates: "{{ zabbix_link_templates }}"
    status: "{{ zabbix_host_status }}"
    state: "{{ zabbix_create_host }}"
    proxy: "{{ zabbix_proxy }}"
    inventory_mode: "{{ zabbix_inventory_mode }}"
    interfaces: "{{ zabbix_agent_interfaces }}"
    visible_name: "{{ zabbix_visible_hostname|default(zabbix_agent_hostname) }}"
  when:
    - zabbix_api_create_hosts
  become: no
  changed_when: false
  tags:
    - api

- name: "Updating host configuration with macros"
  local_action:
    module: zabbix_hostmacro
    server_url: "{{ zabbix_url }}"
    login_user: "{{ zabbix_api_user }}"
    login_password: "{{ zabbix_api_pass }}"
    host_name: "{{ zabbix_agent_hostname }}"
    macro_name: "{{ item.macro_key }}"
    macro_value: "{{ item.macro_value }}"
  with_items: "{{ zabbix_macros | default([]) }}"
  when:
    - zabbix_macros is defined
    - item.macro_key is defined
  become: no
  tags:
    - api
