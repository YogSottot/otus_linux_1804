---
# Percona Slaves Setup
# We assume that, if a master slace setup is user, we bind to a specific interface

- name: Sets percona master IP
  set_fact:
    __percona_master_ip: "{{ hostvars[percona_master_host]['ansible_' + percona_bind_interface]['ipv4']['address'] }}"

- name: Adds required replication users
  mysql_user:
    login_user: root
    login_password: "{{ percona_root_password }}"
    name: "{{ percona_replication_user }}"
    password: "{{ percona_replication_password }}"
    priv: "*.*:REPLICATION SLAVE"
    host: "{{ hostvars[item]['ansible_' + percona_bind_interface]['ipv4']['address'] }}"
  with_items:
    - "{{ groups[percona_slaves_group] }}"
  delegate_to: "{{ percona_master_host }}"

#- name: Get slaves
#  mysql_replication:
#    mode: getslave
#  register: __percona_slaves_status
#  ignore_errors: true
#  when: "inventory_hostname in groups[percona_slaves_group]"
#
#- name: Debug status
#  debug: var=__percona_slaves_status

#- name: Stop replication
#  mysql_replication: mode=stopslave
#  when: inventory_hostname in groups[percona_slaves_group] and (__percona_slaves_status|failed or __percona_slaves_status.Slave_SQL_Running != "Yes")

#- name: Start slave with proper master if slave was not running
#  mysql_replication:
#    mode: changemaster
#    master_host: "{{ __percona_master_ip }}"
#    master_port: "{{ percona_port }}"
#    master_user: "{{ percona_replication_user }}"
#    master_password: "{{ percona_replication_password }}"
#  when: inventory_hostname in groups[percona_slaves_group] and (__percona_slaves_status|failed or __percona_slaves_status.Slave_SQL_Running != "Yes")
#  register: __percona_master_changed
#  #when: __percona_slaves_status|failed

#- name: Get slaves again
#  mysql_replication:
#    mode: getslave
#  register: __percona_slaves_status
#  ignore_errors: true
#  when: "inventory_hostname in groups[percona_slaves_group]"

#- name: Stop slave if Slave_IO_Running=No
#  mysql_replication:
#    mode: stopslave
#  when: "inventory_hostname in groups[percona_slaves_group] and __percona_slaves_status.Slave_IO_Running == 'No'"

#- name: Stop slave if master is new
#  mysql_replication:
#    mode: stopslave
#  when: "inventory_hostname in groups[percona_slaves_group] and __percona_slaves_status.Master_Host != __percona_master_ip"

#- name: Start slave with proper master if slave was not running
#  mysql_replication:
#    mode: startslave
#  when: inventory_hostname in groups[percona_slaves_group] and __percona_master_changed|changed

# - name: Start slave with proper master if slave was not running
#   mysql_replication:
#     mode: startslave
#     master_host: "{{ __percona_master_ip }}"
#     master_port: "{{ percona_port }}"
#     master_user: "{{ percona_replication_user }}"
#     master_password: "{{ percona_replication_password }}"
#   when: "inventory_hostname in groups[percona_slaves_group] and __percona_slaves_status.Slave_IO_Running == 'No'"
#
# - name: Change master if master is new
#   mysql_replication:
#     mode: changemaster
#     master_host: "{{ __percona_master_ip }}"
#     master_port: "{{ percona_port }}"
#     master_user: "{{ percona_replication_user }}"
#     master_password: "{{ percona_replication_password }}"
#   when: "inventory_hostname in groups[percona_slaves_group] and __percona_slaves_status.Master_Host != __percona_master_ip"
