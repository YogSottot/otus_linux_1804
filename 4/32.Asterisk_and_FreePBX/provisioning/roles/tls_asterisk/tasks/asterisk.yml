---
# Asterisk

- name: Download and extract Asterisk packages
  unarchive:
    src: "{{ item }}"
    dest: /usr/src
    remote_src: yes
  with_items: "{{ deploy_asterisk_packages }}"

- name: Find Asterisk path
  find:
    file_type: directory
    paths: /usr/src
    patterns: "^asterisk"
    use_regex: yes
  register: asterisk_path

- name: Install Asterisk prereqs - call a *magic* script
  command: "contrib/scripts/install_prereq install"
  args:
    chdir: "{{ asterisk_path.files.0.path }}"
  changed_when: false

- name: Configure and install asterisk
  command: "{{ item.command }}"
  args:
    chdir: "{{ asterisk_path.files.0.path }}"
    creates: "{{ item.creates }}"
  with_items:
    - { command: './configure --libdir=/usr/lib64 --with-crypto --with-ssl=ssl --with-srtp --with-pjproject-bundled', creates: "{{ asterisk_path.files.0.path }}/config.log" }
    - { command: 'contrib/scripts/get_mp3_source.sh', creates: "{{ asterisk_path.files.0.path }}/addons/mp3" }

# Reference - https://wiki.asterisk.org/wiki/display/AST/Using+Menuselect+to+Select+Asterisk+Options
#- name: Make menuoptions template
#  template:
#    src: menuselect.makeopts.j2
#    dest: "{{ asterisk_path.files.0.path }}/menuselect.makeopts"

# Git and find . -name ".gitignore" -exec rm -rf {} \; becomes useful here for checking changed files

- name: Run final install for Asterisk
  command: "{{ item.command }}"
  args:
    chdir: "{{ asterisk_path.files.0.path }}"
    creates: "{{ item.creates }}"
  register: install_asterisk
  with_items:
    - { command: 'make menuselect.makeopts', creates: "{{ asterisk_path.files.0.path }}/codecs/.makeopts" }
    - { command: 'make', creates: "{{ asterisk_path.files.0.path }}/main/utils.o" }
    - { command: 'make install', creates: "/usr/sbin/asterisk" }
    - { command: 'mkdir -p /etc/asterisk/keys', creates: "/etc/asterisk/keys" }


- name: Run final commands and config only after install
  command: "{{ item }}"
  args:
    chdir: "{{ asterisk_path.files.0.path }}"
  with_items:
    - make config
    - ldconfig
  when: install_asterisk.changed


- name: Make sure the default asterisk service is disabled
  service:
    name: "asterisk"
    enabled: yes


- name: Make sure everything is owned by asterisk user
  file:
    path: "{{ item }}"
    owner: asterisk
    recurse: yes
  with_items:
    - /var/run/asterisk
    - /etc/asterisk
    - /var/lib/asterisk
    - /var/log/asterisk
    - /var/spool/asterisk
    - /usr/lib64/asterisk
    - /var/www/

- name: setup configs
  copy:
      src: ../files/conf/asterisk/
      dest: /etc/asterisk/

- name: setup odbc
  copy:
      src: ../files/conf/odbc.ini
      dest: /etc/odbc.ini


- name: prepare alembic config
  command: "{{ item }}"
  args:
      chdir: "{{ asterisk_path.files.0.path }}/contrib/ast-db-manage/"
  with_items:
      - cp config.ini.sample config.ini

- name: setup mysql password for alembic
  lineinfile:
      dest: "{{ asterisk_path.files.0.path }}/contrib/ast-db-manage/config.ini"
      regexp: "^sqlalchemy.url = mysql.*"
      line: "sqlalchemy.url = mysql://root:{{ mysqlpass }}@localhost/asterisk"


- name: alembic upgrade
  args:
      chdir: "{{ asterisk_path.files.0.path }}/contrib/ast-db-manage/"
  command: alembic -c config.ini upgrade head


- name: setup mysql password for odbc
  lineinfile:
      dest: /etc/odbc.ini
      state: present
      line: "Password = {{ mysqlpass }}"


- name: setup mysql password for resodbc
  lineinfile:
      dest: /etc/asterisk/res_odbc.conf
      state: present
      line: "password = {{ mysqlpass }}"


- name: copy tls scripts
  copy:
      src: ../files/scripts/
      dest: /root/
      mode: 0770


- name: ca keys
  args:
      chdir: /root/
  command: ./ast_tls_cert -C "{{ inventory_hostname }}" -O "{{ pbxname }}" -d /etc/asterisk/keys -p "{{ keypass }}"

- name: user keys
  args:
      chdir: /root/
  command: ./add_sipuser.sh "{{ item }}" "{{ mysqlpass}}" "{{ keypass }}" "{{ inventory_hostname }}" "{{ pbxname }}"
  with_items: "{{ sipaccs }}"


- name: Restart asterisk
  service:
    name: "asterisk"
    state: restarted
